import ccxt
import asyncio
import numpy as np
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv("8153754798:AAGY5YkGcq9iNc_bhF62Q73wSJgv8aO7ZRk")
CHAT_ID = os.getenv("178010516")  # –ú–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ @userinfobot
SYMBOL = "BTC/USDT"  # –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞
EXCHANGE_NAME = "binance"  # –ë–∏—Ä–∂–∞
MA_SHORT = 7  # –ö–æ—Ä–æ—Ç–∫–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
MA_LONG = 25  # –î–ª–∏–Ω–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
TIMEFRAME = "1h"  # –¢–∞–π–º—Ñ—Ä–µ–π–º (1h = 1 —á–∞—Å)

# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º Telegram-–±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∏—Ä–∂–µ
exchange = getattr(ccxt, EXCHANGE_NAME)({'rateLimit': 1200})

async def get_signal():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        candles = exchange.fetch_ohlcv(SYMBOL, timeframe=TIMEFRAME, limit=MA_LONG)
        df = pd.DataFrame(candles, columns=["timestamp", "open", "high", "low", "close", "volume"])
        df["ma_short"] = df["close"].rolling(MA_SHORT).mean()
        df["ma_long"] = df["close"].rolling(MA_LONG).mean()

        if df["ma_short"].iloc[-2] < df["ma_long"].iloc[-2] and df["ma_short"].iloc[-1] > df["ma_long"].iloc[-1]:
            await bot.send_message(CHAT_ID, f"üìà **BUY SIGNAL**: {SYMBOL} üöÄ\n–¶–µ–Ω–∞: {df['close'].iloc[-1]} USDT", parse_mode=ParseMode.MARKDOWN)
        elif df["ma_short"].iloc[-2] > df["ma_long"].iloc[-2] and df["ma_short"].iloc[-1] < df["ma_long"].iloc[-1]:
            await bot.send_message(CHAT_ID, f"üìâ **SELL SIGNAL**: {SYMBOL} ‚ö†Ô∏è\n–¶–µ–Ω–∞: {df['close'].iloc[-1]} USDT", parse_mode=ParseMode.MARKDOWN)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

async def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É"""
    while True:
        await get_signal()
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(start_bot())
    executor.start_polling(dp, skip_updates=True)
